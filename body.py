import os
import requests
from datetime import datetime, timedelta
import json
import telebot
from telebot import types
from bs4 import BeautifulSoup
import feedparser
import yfinance as yf
import openai

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = ''
RBC_RSS_URL = ''
FOREX_API = ''
CRYPTO_API = ''
STOCK_API = yf  # Yahoo Finance
FORBES_URL = ''
TELEGRAM_PREMIUM_API = ''

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_TOKEN)

NEWSAPI_KEY = ''
OPENAI_API_KEY = ''
openai.api_key = OPENAI_API_KEY

def get_finance_news_ru():
    url = 'https://newsapi.org/v2/everything'
    params = {
        'q': '—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ä—ã–Ω–æ–∫ OR —Ñ–æ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫ OR —ç–∫–æ–Ω–æ–º–∏–∫–∞',
        'language': 'ru',
        'sortBy': 'publishedAt',
        'pageSize': 10,
        'apiKey': NEWSAPI_KEY
    }

    response = requests.get(url, params=params)
    if response.status_code != 200:
        return f"–û—à–∏–±–∫–∞ NewsAPI: {response.status_code} {response.text}"

    data = response.json()
    articles = data.get('articles', [])

    all_text = ""
    for article in articles:
        title = article.get('title', '')
        desc = article.get('description', '')
        all_text += f"{title}. {desc} "

    if not all_text.strip():
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è."

    prompt = (
        "–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫—É—é –≤—ã–∂–∏–º–∫—É –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ 5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö:\n\n"
        + all_text
    )

    try:
        response = openai.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –¥–µ–ª–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=300,
            temperature=0.5,
        )

        summary = response.choices[0].message.content.strip()
        return f"\nüìù –í–´–ñ–ò–ú–ö–ê –ò–ó –ù–û–í–û–°–¢–ï–ô:\n {summary}"

    except Exception as e:
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ OpenAI:", e

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton('üìà –ê–∫—Ü–∏–∏'))
    keyboard.add(types.KeyboardButton('üí± –í–∞–ª—é—Ç—ã'))
    keyboard.add(types.KeyboardButton('üì∞ –ù–æ–≤–æ—Å—Ç–Ω–∞—è –≤—ã–∂–∏–º–∫–∞'))
    keyboard.add(types.KeyboardButton('üì∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–æ–≤–æ—Å—Ç—å —Å –ü—É–ª—å—Å–∞'))
    keyboard.add(types.KeyboardButton('‚ÑπÔ∏è –û –±–æ—Ç–µ'))
    return keyboard


def create_stocks_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton('üá∑üá∫ –†–æ—Å—Å–∏–π—Å–∫–∏–µ –∞–∫—Ü–∏–∏'))
    keyboard.add(types.KeyboardButton('üá∫üá∏ –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ –∞–∫—Ü–∏–∏'))
    keyboard.add(types.KeyboardButton('üîô –ù–∞–∑–∞–¥'))
    return keyboard


def create_currency_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton('üíµ USD/RUB'))
    keyboard.add(types.KeyboardButton('üí∂ EUR/RUB'))
    keyboard.add(types.KeyboardButton('üí∑ GBP/RUB'))
    keyboard.add(types.KeyboardButton('üí¥ CNY/RUB'))
    keyboard.add(types.KeyboardButton('‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã'))
    keyboard.add(types.KeyboardButton('üîô –ù–∞–∑–∞–¥'))
    return keyboard


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def get_currency_rates():
    try:
        response = requests.get(FOREX_API)
        data = response.json()
        usd_rub = data['rates']['RUB']
        eur_rub = data['rates']['RUB'] / data['rates']['EUR']
        gbp_rub = data['rates']['RUB'] / data['rates']['GBP']
        cny_rub = data['rates']['RUB'] / data['rates']['CNY']

        return {
            'USD/RUB': round(usd_rub, 2),
            'EUR/RUB': round(eur_rub, 2),
            'GBP/RUB': round(gbp_rub, 2),
            'CNY/RUB': round(cny_rub, 2),
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }
    except Exception as e:
        print(f"Error getting currency rates: {e}")
        return None


def get_crypto_prices():
    try:
        params = {
            'ids': 'bitcoin,ethereum,tether,binancecoin',
            'vs_currencies': 'usd,rub'
        }
        response = requests.get(CRYPTO_API, params=params)
        data = response.json()

        result = {}
        for crypto, rates in data.items():
            result[crypto] = {
                'USD': rates['usd'],
                'RUB': rates['rub']
            }
        return result
    except Exception as e:
        print(f"Error getting crypto prices: {e}")
        return None


def get_stock_price(ticker):
    try:
        stock = STOCK_API.Ticker(ticker)
        hist = stock.history(period='1d')
        if not hist.empty:
            last_price = hist['Close'].iloc[-1]
            return last_price
        return None
    except Exception as e:
        print(f"Error getting stock price for {ticker}: {e}")
        return None




def get_market_news():
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π RSS-–∏—Å—Ç–æ—á–Ω–∏–∫ –æ—Ç –†–ë–ö
        rbc_url = "https://www.rbc.ru/v10/ajax/get-news-feed/project/rbcnews.uploaded/lastDate/{}/limit/10"

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        last_date = int(datetime.now().timestamp())
        url = rbc_url.format(last_date)

        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }

        response = requests.get(url, headers=headers)
        data = response.json()

        news_items = []
        for item in data.get('items', [])[:10]:  # –ë–µ—Ä–µ–º 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–æ—Å—Ç—å –Ω–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
            news_time = datetime.fromtimestamp(item['publish_date_t'])
            if datetime.now() - news_time < timedelta(days=1):
                news_items.append({
                    'title': item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                    'link': item.get('link_url', 'https://www.rbc.ru'),
                    'published': news_time.strftime('%Y-%m-%d %H:%M:%S')
                })

        return news_items if news_items else None
    except Exception as e:
        print(f"Error getting RBC news: {e}")
        return None


def get_forbes_news():
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept-Language': 'en-US,en;q=0.9'
        }

        response = requests.get('https://www.forbes.com/business/', headers=headers)
        soup = BeautifulSoup(response.text, 'html.parser')

        news_items = []

        # –ù–æ–≤—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è Forbes 2023
        articles = soup.select('article.stream-item')[:5]

        for article in articles:
            try:
                title = article.select_one('h3').text.strip()
                link = article.find('a')['href']

                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –ø–æ–ª–Ω–∞—è
                if not link.startswith('http'):
                    link = 'https://www.forbes.com' + link

                # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                time_tag = article.find('time')
                pub_time = time_tag['datetime'] if time_tag else '–ù–µ–¥–∞–≤–Ω–æ'

                news_items.append({
                    'title': title,
                    'link': link,
                    'published': pub_time
                })
            except Exception as e:
                print(f"Error parsing Forbes article: {e}")
                continue

        return news_items if news_items else None
    except Exception as e:
        print(f"Error getting Forbes news: {e}")
        return None


@bot.message_handler(func=lambda message: message.text == 'üì∞ –ù–æ–≤–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞')
def show_market_news(message):
    try:
        news = get_finance_news_ru()
        forbes_news = get_forbes_news()

        if not news and not forbes_news:
            bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        response = "<b>üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏</b>\n\n"+get_finance_news_ru()

        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(response) > 4000:
            part1 = response[:4000]
            part2 = response[4000:]
            bot.send_message(message.chat.id, part1, parse_mode='HTML', disable_web_page_preview=True)
            bot.send_message(message.chat.id, part2, parse_mode='HTML', disable_web_page_preview=True)
        else:
            bot.send_message(message.chat.id, response, parse_mode='HTML', disable_web_page_preview=True)

    except Exception as e:
        print(f"Error in show_market_news: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def get_forbes_news():
    try:
        response = requests.get(FORBES_URL, headers={'User-Agent': 'Mozilla/5.0'})
        soup = BeautifulSoup(response.text, 'html.parser')

        news_items = []
        articles = soup.find_all('article', limit=5)

        for article in articles:
            title = article.find('h3').text.strip()
            link = article.find('a')['href']
            if not link.startswith('http'):
                link = 'https://www.forbes.com' + link
            news_items.append({'title': title, 'link': link})

        return news_items if news_items else None
    except Exception as e:
        print(f"Error getting Forbes news: {e}")
        return None


def get_tinkoff_pulse_news():
    try:
        # URL API, –∫–æ—Ç–æ—Ä–æ–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¢–∏–Ω—å–∫–æ—Ñ—Ñ
        url = "https://api.tinkoff.ru/v1/news_feed"

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
        params = {
            'category': 'all',
            'count': 1,  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–æ–≤–æ—Å—Ç—å
            'sessionId': 'anonymous',  # –ê–Ω–æ–Ω–∏–º–Ω—ã–π –¥–æ—Å—Ç—É–ø
            'appName': 'invest',
            'appVersion': '6.24.0',
            'platform': 'web'
        }

        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'application/json',
            'Origin': 'https://www.tinkoff.ru',
            'Referer': 'https://www.tinkoff.ru/invest/social/'
        }

        response = requests.get(url, headers=headers, params=params)
        response.raise_for_status()
        data = response.json()

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–æ–≤–æ—Å—Ç—å
        if data.get('payload') and data['payload'].get('news') and len(data['payload']['news']) > 0:
            news_item = data['payload']['news'][0]

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            publish_time = datetime.fromtimestamp(news_item['publishDate'] / 1000).strftime('%d.%m.%Y %H:%M')

            return {
                'title': news_item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                'text': news_item.get('text', ''),
                'author': news_item.get('author', {}).get('name', '–ê–Ω–æ–Ω–∏–º'),
                'time': publish_time,
                'link': f"https://www.tinkoff.ru/invest/social/profile/{news_item['author']['id']}/post/{news_item['id']}/",
                'source': '–¢–∏–Ω—å–∫–æ—Ñ—Ñ –ü—É–ª—å—Å'
            }

        return None

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {str(e)}")
        return None


@bot.message_handler(func=lambda message: message.text == 'üì∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–æ–≤–æ—Å—Ç—å —Å –ü—É–ª—å—Å–∞')
def send_tinkoff_news(message):
    news = get_tinkoff_pulse_news()

    if news:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = (
            f"<b>üì∞ {news['title']}</b>\n\n"
            f"{news['text']}\n\n"
            f"üë§ <b>–ê–≤—Ç–æ—Ä:</b> {news['author']}\n"
            f"üïí <b>–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ:</b> {news['time']}\n"
            f"üîó <a href='{news['link']}'>–ß–∏—Ç–∞—Ç—å –Ω–∞ –ü—É–ª—å—Å–µ</a>"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π HTML-—Ä–∞–∑–º–µ—Ç–∫–∏
        bot.send_message(
            message.chat.id,
            response,
            parse_mode='HTML',
            disable_web_page_preview=False
        )
    else:
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–æ–≤–æ—Å—Ç—å —Å –¢–∏–Ω—å–∫–æ—Ñ—Ñ –ü—É–ª—å—Å–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞."
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(
        message.chat.id,
        "üìä <b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫</b>\n\n"
        "–Ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ:\n"
        "- –ö—É—Ä—Å–∞—Ö –≤–∞–ª—é—Ç üí±\n"
        "- –°—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–∫—Ü–∏–π üìà\n"
        "- –ù–æ–≤–æ—Å—Ç–Ω–∞—è –≤—ã–∂–∏–º–∫–∞ üì∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:",
        parse_mode='HTML',
        reply_markup=create_main_keyboard()
    )


@bot.message_handler(func=lambda message: message.text == 'üîô –ù–∞–∑–∞–¥')
def back_to_main(message):
    bot.send_message(
        message.chat.id,
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=create_main_keyboard()
    )


@bot.message_handler(func=lambda message: message.text == 'üìà –ê–∫—Ü–∏–∏')
def stocks_menu(message):
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫—Ü–∏–π:",
        reply_markup=create_stocks_keyboard()
    )


@bot.message_handler(func=lambda message: message.text in ['üá∑üá∫ –†–æ—Å—Å–∏–π—Å–∫–∏–µ –∞–∫—Ü–∏–∏', 'üá∫üá∏ –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ –∞–∫—Ü–∏–∏'])
def show_stocks(message):
    if message.text == 'üá∑üá∫ –†–æ—Å—Å–∏–π—Å–∫–∏–µ –∞–∫—Ü–∏–∏':
        stocks = {
            'SBER': '–°–±–µ—Ä–±–∞–Ω–∫',
            'GAZP': '–ì–∞–∑–ø—Ä–æ–º',
            'LKOH': '–õ—É–∫–æ–π–ª',
            'YNDX': '–Ø–Ω–¥–µ–∫—Å',
            'VTBR': '–í–¢–ë'
        }
    else:
        stocks = {
            'AAPL': 'Apple',
            'MSFT': 'Microsoft',
            'GOOGL': 'Alphabet',
            'AMZN': 'Amazon',
            'TSLA': 'Tesla'
        }

    response = f"<b>{message.text[2:]} - —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã:</b>\n\n"
    for ticker, name in stocks.items():
        price = get_stock_price(ticker)
        if price:
            response += f"{name} ({ticker}): <b>{price:.2f} $</b>\n"
        else:
            response += f"{name} ({ticker}): –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n"

    response += "\n–î–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –∑–∞–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è –Ω–∞ 15-20 –º–∏–Ω—É—Ç."
    bot.send_message(message.chat.id, response, parse_mode='HTML')


@bot.message_handler(func=lambda message: message.text == 'üí± –í–∞–ª—é—Ç—ã')
def currency_menu(message):
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:",
        reply_markup=create_currency_keyboard()
    )


@bot.message_handler(func=lambda message: message.text in ['üíµ USD/RUB', 'üí∂ EUR/RUB', 'üí∑ GBP/RUB', 'üí¥ CNY/RUB'])
def show_currency_rate(message):
    pair = message.text[2:]
    rates = get_currency_rates()

    if rates:
        rate = rates.get(pair)
        if rate:
            response = f"<b>–ö—É—Ä—Å {pair}</b>\n\n" \
                       f"1 {pair.split('/')[0]} = <b>{rate}</b> {pair.split('/')[1]}\n\n" \
                       f"<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {rates['timestamp']}</i>"
            bot.send_message(message.chat.id, response, parse_mode='HTML')
        else:
            bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —ç—Ç–æ–π –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä–µ.")
    else:
        bot.send_message(message.chat.id, "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@bot.message_handler(func=lambda message: message.text == '‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã')
def show_crypto_prices(message):
    prices = get_crypto_prices()

    if prices:
        response = "<b>–ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:</b>\n\n"
        for crypto, rates in prices.items():
            response += f"<b>{crypto.capitalize()}</b>\n" \
                        f"USD: {rates['USD']:.2f} $\n" \
                        f"RUB: {rates['RUB']:.2f} ‚ÇΩ\n\n"

        response += f"<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</i>"
        bot.send_message(message.chat.id, response, parse_mode='HTML')
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö.")



@bot.message_handler(func=lambda message: message.text == 'üì∞ –ù–æ–≤–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞')
def show_market_news(message):
    news = get_market_news()
    forbes_news = get_forbes_news()

    if news or forbes_news:
        response = "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞:</b>\n\n"
        """
        response += "<u>–†–ë–ö:</u>\n"
        for item in news[:5]:
            response += f"‚Ä¢ <a href='{item['link']}'>{item['title']}</a>\n"
        """
        response += "\n<u>Forbes:</u>\n"
        for item in forbes_news[:5]:
            response += f"‚Ä¢ <a href='{item['link']}'>{item['title']}</a>\n"

        bot.send_message(message.chat.id, response, parse_mode='HTML', disable_web_page_preview=True)
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@bot.message_handler(func=lambda message: message.text == '‚ÑπÔ∏è –û –±–æ—Ç–µ')
def about_bot(message):
    bot.send_message(
        message.chat.id,
        "ü§ñ <b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:\n"
        "- –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç —Å exchangerate-api.com\n"
        "- –ö–æ—Ç–∏—Ä–æ–≤–∫–∏ –∞–∫—Ü–∏–π —Å Yahoo Finance\n"
        "- –ù–æ–≤–æ—Å—Ç–∏ —Å –†–ë–ö –∏ Forbes\n"
        "- –¶–µ–Ω—ã –Ω–∞ Telegram Premium —Å fragment.com\n\n"
        "–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é.",
        parse_mode='HTML'
    )


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()